------------------------------------------------
---- sum を五段階の工程(pp.65-66)を用いて定義する．

----- 1. 型を定義する．
--sum' :: [Int] -> Int

----- 2. 場合分けをする．
-- sum' [] = ?
-- sum' (x:xs) = ?

----- 3. 簡単な方を定義する
sum' [] = 0

----- 4. 複雑な方を定義する
sum' (x:xs) = x + sum' xs

----- 5. 一般化し単純にする．
sum' :: Num a => [a] -> a


------------------------------------------------
--- take を五段階の工程(pp.65-66)を用いて定義する．

----- 1. 型を定義する．
take' :: Int -> [a] -> [a]

----- 2. 場合分けをする．
-- take' _ []
-- take' 0 _
-- take' n (x:xs)

----- 3. 簡単な方を定義する
take' _ [] = []
take' 0 _  = []

----- 4. 複雑な方を定義する
take' n (x:xs) = x : take' (n-1) xs

----- 5. 一般化し単純にする．
-- これ以上
--    Int -> [a] -> [a]
--  を一般化はできない（...はず）

------------------------------------------------
-- last を五段階の工程(pp.65-66)を用いて定義する．

----- 1. 型を定義する．
last' :: [a] -> a

----- 2. 場合分けをする．
-- last' []
-- last' [x]
-- last' (x:xs)

----- 3. 簡単な方を定義する
last' []  = error "empty list"
last' [x] = x

----- 4. 複雑な方を定義する
last' (x:xs) = last' xs

----- 5. 一般化し単純にする．
-- これ以上
--    [a] -> a
--  を一般化はできない（...はず）
