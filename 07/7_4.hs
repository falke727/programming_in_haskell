foldl' :: (a -> b -> a) -> a -> [b] -> a
foldl' f v [] = v
foldl' f v (x:xs) = foldl f (f v x) xs

-- foldl (⊕) v [x0, x1, ..., xn]
--  = ((... (((v ⊕ x0) ⊕ x1) ⊕ x2) ...) ⊕ x(n-1)) ⊕ xn
--
-- 2345 = (1000*2) + (100*3) + (10*4) + (1*5)
--      = ((100*2) + (10*3) + 4) * 10 + 5
--      = (((10*2) + 3)) * 10 + 4) * 10 + 5
--      = (((10*0 + 2) * 10 + 3)) * 10 + 4) * 10 + 5

dec2int :: [Int] -> Int
dec2int = foldl (\x y -> x * 10 + y) 0

-- dec2int [2,3,4,5]
--  = foldl (\x y -> x * 10 + y) 0 [2,3,4,5]
--  = foldl (\x y -> x * 10 + y) ((\x y -> x * 10 + y) 0 2) [3,4,5]
--  = foldl (\x y -> x * 10 + y) 2 [3,4,5]
--  = foldl (\x y -> x * 10 + y) ((\x y -> x * 10 + y) 2 3) [4,5]
--  = foldl (\x y -> x * 10 + y) 23 [4,5]
--  = foldl (\x y -> x * 10 + y) ((\x y -> x * 10 + y) 23 4) [5]
--  = foldl (\x y -> x * 10 + y) 234 [5]
--  = foldl (\x y -> x * 10 + y) ((\x y -> x * 10 + y) 234 5) []
--  = foldl (\x y -> x * 10 + y) 2345 []
--  = 2345
